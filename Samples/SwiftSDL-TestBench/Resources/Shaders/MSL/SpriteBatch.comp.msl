#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct SpriteComputeData
{
    packed_float3 position;
    float rotation;
    float2 scale;
    float4 color;
};

struct type_StructuredBuffer_SpriteComputeData
{
    SpriteComputeData _m0[1];
};

struct SpriteVertex
{
    float4 position;
    float2 texcoord;
    float4 color;
};

struct type_RWStructuredBuffer_SpriteVertex
{
    SpriteVertex _m0[1];
};

kernel void main0(const device type_StructuredBuffer_SpriteComputeData& ComputeBuffer [[buffer(0)]], device type_RWStructuredBuffer_SpriteVertex& VertexBuffer [[buffer(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    SpriteComputeData _52 = ComputeBuffer._m0[gl_GlobalInvocationID.x];
    float _62 = cos(_52.rotation);
    float _63 = sin(_52.rotation);
    float4x4 _74 = (float4x4(float4(1.0, 0.0, 0.0, 0.0), float4(0.0, 1.0, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(_52.position[0], _52.position[1], _52.position[2], 1.0)) * float4x4(float4(_62, _63, 0.0, 0.0), float4(-_63, _62, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0))) * float4x4(float4(_52.scale.x, 0.0, 0.0, 0.0), float4(0.0, _52.scale.y, 0.0, 0.0), float4(0.0, 0.0, 1.0, 0.0), float4(0.0, 0.0, 0.0, 1.0));
    uint _76 = gl_GlobalInvocationID.x * 4u;
    VertexBuffer._m0[_76].position = _74 * float4(0.0, 0.0, 0.0, 1.0);
    uint _79 = _76 + 1u;
    VertexBuffer._m0[_79].position = _74 * float4(1.0, 0.0, 0.0, 1.0);
    uint _82 = _76 + 2u;
    VertexBuffer._m0[_82].position = _74 * float4(0.0, 1.0, 0.0, 1.0);
    uint _85 = _76 + 3u;
    VertexBuffer._m0[_85].position = _74 * float4(1.0, 1.0, 0.0, 1.0);
    VertexBuffer._m0[_76].texcoord = float2(0.0);
    VertexBuffer._m0[_79].texcoord = float2(1.0, 0.0);
    VertexBuffer._m0[_82].texcoord = float2(0.0, 1.0);
    VertexBuffer._m0[_85].texcoord = float2(1.0);
    VertexBuffer._m0[_76].color = _52.color;
    VertexBuffer._m0[_79].color = _52.color;
    VertexBuffer._m0[_82].color = _52.color;
    VertexBuffer._m0[_85].color = _52.color;
}

